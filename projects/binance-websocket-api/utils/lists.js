import { WebSocketMessageModel } from '../../../assets/js/models/websocket.message.model.js'

export const getWebSocketMessageModelList = () => Array.from([
  new WebSocketMessageModel('binance websocket api',),
  new WebSocketMessageModel('ping'),
  new WebSocketMessageModel('time'),
  new WebSocketMessageModel('exchangeInfo', ['symbol']),
  new WebSocketMessageModel('depth', ['symbol', 'limit']),
  new WebSocketMessageModel('trades.recent', ['symbol', 'limit']),
  new WebSocketMessageModel('trades.historical', ['symbol', 'limit', 'fromId']),
  new WebSocketMessageModel('trades.aggregate', ['symbol', 'limit', 'fromId']),
  new WebSocketMessageModel('klines', ['symbol', 'limit', 'interval', 'startTime']),
  new WebSocketMessageModel('uiKlines', ['symbol', 'limit', 'interval', 'startTime']),
  new WebSocketMessageModel('avgPrice', ['symbol']),
  new WebSocketMessageModel('ticker.24hr', ['symbol']),
  new WebSocketMessageModel('ticker.tradingDay', ['symbol']),
  new WebSocketMessageModel('ticker', ['symbol', 'windowSize']),
  new WebSocketMessageModel('ticker.price', ['symbol']),
  new WebSocketMessageModel('ticker.book', ['symbol']),
  new WebSocketMessageModel('session.logon'),
  new WebSocketMessageModel('session.status'),
  new WebSocketMessageModel('session.logout'),
  new WebSocketMessageModel('order.test', ['symbol', 'side', 'type', 'timeInForce', 'quantity', 'price']),
  new WebSocketMessageModel('order.place', ['symbol', 'side', 'type', 'timeInForce', 'quantity', 'price']),
  new WebSocketMessageModel('order.status', ['symbol', 'orderId']),
  new WebSocketMessageModel('order.cancel', ['symbol', 'origClientOrderId']),
  new WebSocketMessageModel('order.cancelReplace', ['symbol', 'side', 'type', 'timeInForce', 'quantity', 'price', 'cancelReplaceMode', 'cancelOrigClientOrderId']),
  new WebSocketMessageModel('openOrders.status', ['symbol']),
  new WebSocketMessageModel('openOrders.cancelAll', ['symbol']),
  new WebSocketMessageModel('orderList.place', ['symbol', 'side', 'quantity', 'price', 'stopPrice', 'stopLimitPrice', 'stopLimitTimeInForce', 'newOrderRespType']),
  new WebSocketMessageModel('orderList.status', ['origClientOrderId']),
  new WebSocketMessageModel('orderList.cancel', ['symbol', 'orderListId']),
  new WebSocketMessageModel('openOrderLists.status'),
  new WebSocketMessageModel('sor.order.place', ['symbol', 'side', 'type', 'timeInForce', 'quantity', 'price']),
  new WebSocketMessageModel('sor.order.test', ['symbol', 'side', 'type', 'timeInForce', 'quantity', 'price']),
  new WebSocketMessageModel('account.status'),
  new WebSocketMessageModel('account.commission', ['symbol']),
  new WebSocketMessageModel('account.rateLimits.orders'),
  new WebSocketMessageModel('allOrders', ['symbol', 'startTime', 'endTime', 'limit']),
  new WebSocketMessageModel('allOrderLists', ['startTime', 'endTime', 'limit']),
  new WebSocketMessageModel('myTrades', ['symbol', 'startTime', 'endTime']),
  new WebSocketMessageModel('myPreventedMatches', ['symbol', 'orderId']),
  new WebSocketMessageModel('myAllocations', ['symbol', 'orderId']),
  new WebSocketMessageModel('userDataStream.start'),
  new WebSocketMessageModel('userDataStream.ping', ['listenKey']),
  new WebSocketMessageModel('userDataStream.stop', ['listenKey']),
])
